package test;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.AfterClass;

import org.openqa.selenium.WebDriver;

import base.ClaseBase;
import pagesObject.PagesObjectAlerts;
import pagesObject.PagesObjectForm;
import pagesObject.PagesObjectsHomeMercadoLibre;
import utilidades.ExcelUtilidades;
import utilidades.GenerarReportePDF;
import utilidades.MyScreenRecorder;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class Runner {

	// DECLARAR LAS VARIABLES GLOBALES
	private WebDriver driver;
	PagesObjectsHomeMercadoLibre homeMercadoLibre;
	PagesObjectForm pagesForm;
	PagesObjectAlerts pagesAlerts;

	Properties propiedades;
	//ReadExcelFile leer;
	//WriteExcelFile escribir;
	ExcelUtilidades excelUtilidades;
	ClaseBase claseBase;

	public String nomTest;
	public File routeFolder;
	public String path;

	GenerarReportePDF generarReportePDF;

	public String name;
	public String lastname;
	public String email;
	public String phone;
	public String adress;
	public String state;
	public String city;

	@BeforeClass
	public void beforeClass() {
		// INSTANCIAR CLASE BASE
		claseBase = new ClaseBase(driver);
		// INSTANCIAR PAGINA DE HOME
		homeMercadoLibre = new PagesObjectsHomeMercadoLibre(driver);
		// ISNTANCIAR CONEXION A GOOGLE
		driver = pages.chromeDriverConnection();
		// INSTANCIAR PAGESFORM
		pagesForm = new PagesObjectForm(driver);
		pagesAlerts = new PagesObjectAlerts(driver);
		// INSTANCIAR LAS CLASES DE EXCEL
		//leer = new ReadExcelFile();
		//escribir = new WriteExcelFile();
		// INSTANCIAR PROPIEDADES-PROPERTIES
		propiedades = new Properties();
		InputStream entrada = null;
		try {
			entrada = new FileInputStream("./propiedades.properties");
			propiedades.load(entrada);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		// ACCEDER A LA URL
		pages.urlAccess(propiedades.getProperty("url"));
		// INSTANCIAR LA CLASE DE GENERAR REPORTES PDF
		generarReportePDF = new GenerarReportePDF();
		// ESTABLECER RUTA DE EVIDENCIAS
		path = propiedades.getProperty("outputFile");
		// EXTABLECER DONDE SE VA A GUARDAR EL PDF
		generarReportePDF.setRutaImagen(propiedades.getProperty("rutaImagenReporte"));

	}

	@DataProvider(name = "ListaProductos")
	public Object [][] listaProductos() throws IOException{
		Object [][] arregloDeProductos = ExcelUtilidades.getTableArray("./data/mercadoLibre.xlsx", "ListaDeProductos");
		return arregloDeProductos;
	}
	
	@Test(dataProvider = "ListaProductos")
	public void diligenciarForm(String producto) throws Exception {
		// OBTENER EL NOMBRE DEL METODO PARA NOMBRAR LA CARPETA DEL VIDEO
		String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
		// CREAR LA CARPETA DONDE VAMOS A GUARDAR EL VIDEO
		File rutaFile = claseBase.crearCarpeta(propiedades, nomTest, path);
		// INICAR GRABADORA DE VIDEO
		MyScreenRecorder.startRecording(nomTest, rutaFile);
		// INICAR EVIDENCIA PDF
		generarReportePDF.crearPlantilla(nomTest, rutaFile);
		// ENTRAR A FORMS
		pages.enterAForms(rutaFile);
		// ENTRAR A PRACTICE
		pagesForm.enterAPractice(rutaFile);
		// USAR EL METODO REGISTERFORM
		pagesForm.registerForm(name, lastName, email, phone, adress, state, city, mes, anho, dia, rutaFile);
		// FINALIZAR EVIDENCIA PDF
		generarReportePDF.cerrarPlantilla();
		// FINALIZAR GRABADORA DE VIDEO
		MyScreenRecorder.stopRecording();
	}
	
	
	

	@AfterClass
	public void afterClass() {
		// CERRAR EL DRIVER CHROME
		driver.quit();
	}
}
